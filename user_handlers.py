from aiogram.dispatcher import FSMContext

from main_variables import bot, dp, types

from config import ADMIN, ADMIN_CHANNEL

from menus.users.main_menu import main_menu
from menus.users.cancel_btn import cancel_menu
from menus.inline.lint_to_prices import price_menu

from state import Ordering


# –í—Å—Ç—Ä–µ—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
@dp.message_handler(lambda message: message.text == '/start' and message.from_user.id not in ADMIN and message.chat.type == 'private')
async def hello(message: types.Message):
    msg_text = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –≤–µ–±-—Å—Ç—É–¥–∏–∏ "Rustle Studio".
–ß–µ –Ω–∞–¥–æ-—Ç–æ?
    """
    await bot.send_message(message.chat.id, msg_text, reply_markup=main_menu)
    print(message)


# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == '–û—Ç–º–µ–Ω–∞' and message.chat.type == 'private')
async def cancel_of_ordering(message: types.Message, state=FSMContext):
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=main_menu)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
@dp.message_handler(lambda message: message.text == '–£—Å–ª—É–≥–∏' and message.chat.type == 'private')
async def answer_about_services(message: types.Message):
    await message.answer('–ü–æ–∫–∞ —É—Å–ª—É–≥ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ')


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
@dp.message_handler(lambda message: message.text == '–¶–µ–Ω—ã' and message.chat.type == 'private')
async def link_to_prices(message: types.Message):
    await message.answer('–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –ø—Ä–∞–π—Å–æ–º:', reply_markup=price_menu)


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda message: message.text == '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' and message.chat.type == 'private')
async def ordering(message: types.Message):
    await message.answer("""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É üëá

1. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?
2. –í –∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å—Å—è?

–í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏üêº
    """, reply_markup=cancel_menu)
    await Ordering.info_about_service.set()


@dp.message_handler(state=Ordering.info_about_service)
async def end_of_ordering(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text

        if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
            await message.forward(ADMIN_CHANNEL)
            await message.answer('–°–ø–∞—Å–∏–±–æ, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è', reply_markup=main_menu)
        else:
            await message.answer('–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', reply_markup=main_menu)
        
        await state.finish()